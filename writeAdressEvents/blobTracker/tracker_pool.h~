#ifndef __TRACKER_POOL_H
#define __TRACKER_POOL_H

#include "blob_tracker.h"

#include <math.h>
#include <yarp/sig/all.h>
#include <yarp/os/all.h>
#include <vector>
#include <string>

class TrackerPool {
 public:
  TrackerPool(double sig_x, double sig_y, double sig_xy, double alpha_pos, double alpha_shape, double k, 
	      double max_dist, bool fixed_shape, double tau_act, double up_thresh, double down_thresh, 
	      double alpha_rep, int d_rep, int max_nb_trackers, int nb_ev_regulate);

  ~TrackerPool();

  void get_tracker (BlobTracker &, int);

  void update(int ev_x, int ev_y, int ev_t);

  void get_tracker_center(std::vector<double> &cen_x, std::vector<double> &cen_y);

  void get_ellipse_parameters(std::vector<double> &a, std::vector<double> &b, std::vector<double> &alpha);

  void display(yarp::sig::ImageOf<yarp::sig::PixelRgb> &img);

  void regulate_pool(int ts);
 protected:
  std::vector<BlobTracker> trackers_;
  yarp::os::Port image_port;

  // We will regulate the pool every fixed number of events
  int nb_ev_regulate_, count_;
  int ts_last_reg_;
  double alpha_rep_;
  int d_rep_, max_nb_tr_;

  // Initial parameters of the blob trackers
  double max_dist_, up_thresh_, down_thresh_;
  double sig_x2_, sig_y2_, sig_xy_;
  double tau_act_, alpha_pos_, alpha_shape_, k_;
  bool fixed_shape_;
};

#endif /* __GAUSSIAN_BLOB_TRACKER_H */
